foo + bar
foo <- 2
bar <- 4
foo + bar
result
result <- foo + bar
result
list <- c(2,4,6,8)
list[2]
list[1]
list[0]
list[5]
10/2
10^2
2==0
F && T
F|| TRUE
vect= c(1,2,3,4,5,6,7,8)
vect*2
sqrt(vect)
rev(vect)
sort(vect)
vect=c(2,4,6,8)
names(vect)=c("1st","2nd","3rd","4th")
vect
vect["2nd"] <-20
vect
if((vect["4th"]%%2)==0)
{
print("Number is even")
}
else{
print("Number is odd")
}
if((vect["4th"]%%2)==0)
{
print("Number is even")
} else {
print("Number is odd")
}
vect=c(2,4,6,9)
if((vect["4th"]%%2)==0)
{
print("Number is even")
} else {
print("Number is odd")
}
vect=c(2,4,6,9)
names(vect)=c("1st","2nd","3rd","4th")
vect
if((vect["4th"]%%2)==0)
{
print("Number is even")
} else {
print("Number is odd")
}
if((vect["4th"]%%2)==0)
{
print(paste(vect["4th"]," is even"))
} else {
print(paste(vect["4th"]," is odd"))
}
if((vect["4th"]%%2)==0)
{
print(paste(vect["4th"],"is even"))
} else {
print(paste(vect["4th"],"is odd"))
}
demo(graphics)
x <- c(0,cumsum(rnorm(n)))
y <- c(0,cumsum(rnorm(n)))
xx <- c(0:n, n:0)
yy <- c(x, rev(y))
plot(xx, yy, type="n", xlab="Time", ylab="Distance")
rect(usr[1], usr[3], usr[2], usr[4], col="green3")
contour(x, y, volcano, levels = lev, col="yellow", lty="solid", add=TRUE)
box()
title("A Topographic Map of Maunga Whau", font= 4)
title(xlab = "Meters North", ylab = "Meters West", font= 3)
mtext("10 Meter Contour Spacing", side=3, line=0.35, outer=FALSE,
+       at = mean(par("usr")[1:2]), cex=0.7, font=3)
## Conditioning plots
par(bg="cornsilk")
coplot(lat ~ long | depth, data = quakes, pch = 21, bg = "green3")
title("Distance Between Brownian Motions")
## Colored plot margins, axis labels and titles.	 You do need to be
## careful with these kinds of effects.	It's easy to go completely
## over the top and you can end up with your lunch all over the keyboard.
## On the other hand, my market research clients love it.
x <- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02)
par(bg="lightgray")
plot(x, type="n", axes=FALSE, ann=FALSE)
#1.10
demo(graphics)
}
generateSquares <-function(x){
return(x^2)
}
a= generateSquares(4)
print(a)
generateCubes <- function(){
for (i in 1:10) {
print(i^3)
}
}
generateCubes()
sumFunction <- function(a,b,c){
result <- a+b+c
print(result)
}
sumFunction(2,4,5)
sumFunction(a = 4, b = 5, c = 3)
mydataframe <- data.frame(
stu_id = c (1:5),
stu_name = c("Bob","Pat","Jane","Peter","Han"),
stringsAsFactors = FALSE
)
res <- data.frame(mydataframe$stu_id,mydataframe$stu_name)
print(res)
res <- data.frame(mydataframe$stu_id,mydataframe$stu_name)
print(res)
#Problem 1
sales1<-c(12,14,16,29,30,45,19,20,16, 19, 34, 20)
sales2<-rpois(12,34)  # random numbers, Poisson distribution, mean at 34, 12 numbers
par(bg="cornsilk")
plot(sales1, col="blue", type="o", ylim=c(0,100), xlab="Month", ylab="Sales" )
lines(sales2, type="o", pch=22, lty=2, col="red")
grid(nx=NA, ny=NULL)
legend("topright", inset=.05, c("Sales1","Sales2"), fill=c("blue","red"), horiz=TRUE)
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
sales<-read.table(file.choose(), header=T)
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
sales<-read.table(file.choose(), header=T)
sales  # to verify that data has been read
barplot(as.matrix(sales), main="Sales Data", ylab= "Total",beside=T, col=rainbow(5))
text(1.45, fn[3,2], paste("Median =", fn[3,2]), adj=0, cex=.7)
text(0.45, fn[3,1],paste("Median =", fn[3,1]), adj=0, cex=.7)
grid(nx=NA, ny=NULL)
fb1<-read.csv(file.choose())
aapl1<-read.csv(file.choose())
par(bg="cornsilk")
plot(aapl1$Adj.Close, col="blue", type="o", ylim=c(0,100), xlab="Days", ylab="Price" )
legend("topright", inset=.05, c("Apple","Facebook"), fill=c("blue","red"), horiz=TRUE)
par(bg="cornsilk")
plot(aapl1$Adj.Close, col="blue", type="o", ylim=c(0,100), xlab="Days", ylab="Price" )
legend("topright", inset=.05, c("Apple","Facebook"), fill=c("blue","red"), horiz=TRUE)
hist(aapl1$Adj.Close, col=rainbow(8))
View(fb1)
View(fb1)
par(bg="cornsilk")
plot(aapl1$Adj.Close, col="blue", type="o", ylim=c(0,100), xlab="Days", ylab="Price" )
legend("topright", inset=.05, c("Apple","Facebook"), fill=c("blue","red"), horiz=TRUE)
hist(aapl1$Adj.Close, col=rainbow(8))
plot(aapl1$Adj.Close, col="blue", type="o", ylim=c(0,100), xlab="Days", ylab="Price" )
legend("topright", inset=.05, c("Apple","Facebook"), fill=c("blue","red"), horiz=TRUE)
hist(aapl1$Adj.Close, col=rainbow(8))
par(bg="cornsilk")
plot(aapl1$Adj.Close, col="blue", type="o", ylim=c(0,100), xlab="Days", ylab="Price" )
legend("topright", inset=.05, c("Apple","Facebook"), fill=c("blue","red"), horiz=TRUE)
hist(aapl1$Adj.Close, col=rainbow(8))
hist(fb1$Adj.Close, col=rainbow(8))
attach(mtcars)
head(mtcars)
plot(mtcars[c(1,3,4,5,6)], main="MTCARS Data")
plot(mtcars[c(1,3,4,6)], col=rainbow(5),main="MTCARS Data")
ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point()
